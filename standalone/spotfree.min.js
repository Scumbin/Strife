function sleep(e) { new Promise(t => setTimeout(t, e)) } const webpack = { getModule(e, t = !0, o = !1) { if (Array.isArray(e)) { const t = e; e = (e => t.every(t => e.hasOwnProperty(t) || e.__proto__ && e.__proto__.hasOwnProperty(t))) } if (!t) return webpack._getModules(e) }, async init() { for (delete webpack.init; !window.webpackJsonp;)await sleep(1e3); const e = webpackJsonp.push([[], { _powercord: (e, t, o) => { t.cache = o.c, t.require = o } }, [["_powercord"]]]); delete e.cache._powercord, webpack.instance = e }, _getModules(e, t = !1) { const o = Object.values(webpack.instance.cache).filter(e => e.exports); if (t) { const t = o.filter(t => e(t.exports)).map(e => e.exports), r = o.filter(t => t.exports.default && e(t.exports.default)).map(e => e.exports.default); return t.concat(r) } const r = o.find(t => e(t.exports)); if (r) return r.exports; const s = o.find(t => t.exports.default && e(t.exports.default)); return s ? s.exports.default : null } }; webpack.init(); let spotify = webpack.getModule(["isSpotifyPremium"], !1); spotify.isSpotifyPremium = (() => (console.log("yes! you are totally premium!"), !0)), spotify.ensureSpotifyPremium = (() => Promise.resolve());
