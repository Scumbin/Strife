function sleep(t) { new Promise(e => setTimeout(e, t)) } const webpack = { getModule: function (e, o = !0, t) { if (Array.isArray(e)) { const o = e; e = t => o.every(e => t.hasOwnProperty(e) || t.__proto__ && t.__proto__.hasOwnProperty(e)) } if (!o) return webpack._getModules(e) }, init: async function () { for (delete webpack.init; !window.webpackJsonp;)await sleep(1e3); const e = webpackJsonp.push([[], { _powercord: (e, t, o) => { t.cache = o.c, t.require = o } }, [["_powercord"]]]); delete e.cache._powercord, webpack.instance = e }, _getModules: function (t, e = !1) { const o = Object.values(webpack.instance.cache).filter(e => e.exports); if (e) { const s = o.filter(e => t(e.exports)).map(e => e.exports), r = o.filter(e => e.exports.default && t(e.exports.default)).map(e => e.exports.default); return s.concat(r) } const r = o.find(e => t(e.exports)); if (r) return r.exports; e = o.find(e => e.exports.default && t(e.exports.default)); return e ? e.exports.default : null } }; webpack.init(); let s = webpack.getModule(["isSpotifyPremium"], !1); s.isSpotifyPremium = () => !0, s.ensureSpotifyPremium = () => Promise.resolve();
